{"version":3,"sources":["../../src/helpers/user.js"],"names":["isValidRegistrationData","userData","code","result","isObject","requiredFields","key","includes","isValidLogin","validator","isEmpty","isAlphanumeric","isValidPassword","isAlpha","length","isEqualPasswords","equals","password","validEmail","isValidEmail","isValidName","obj","Array","isArray","value","isEmail"],"mappings":"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","file":"user.js","sourcesContent":["import validator from 'validator';\n\nexport const isValidRegistrationData = (userData) => {\n  if (!userData) {\n    return { code: 500, result: 'Missing required data' };\n  }\n  if (isObject(userData)) {\n    const requiredFields = ['login', 'password', 'repeatedPassword', 'email', 'name'];\n    for (let key in userData) {\n      if (requiredFields.includes(key)) {\n        if (key === 'login') {\n          const isValidLogin = !validator.isEmpty(userData[key]) && validator.isAlphanumeric(userData[key]);\n          if (!isValidLogin) {\n            return { code: 500, result: 'Not valid login' };\n          }\n        } else if (key === 'password') {\n          const isValidPassword = !validator.isAlpha(userData[key], ['ru-RU']) && !validator.isEmpty(userData[key]) && userData[key].length >= 6;\n          if (!isValidPassword) {\n            return { code: 500, result: 'Not valid password' };\n          }\n        } else if (key === 'repeatedPassword') {\n          const isEqualPasswords = validator.equals(userData[key], userData.password) && !validator.isEmpty(userData[key]);\n          if (!isEqualPasswords) {\n            return { code: 500, result: 'Passwords do not match' };\n          }\n        } else if (key === 'email') {\n          const validEmail = isValidEmail(userData[key]);\n          if (!validEmail) {\n            return { code: 500, result: 'Not valid email' };\n          }\n        } else if (key === 'name') {\n          const isValidName = !validator.isEmpty(userData[key]);\n          if (!isValidName) {\n            return { code: 500, result: 'Not valid name' };\n          }\n        }\n      } else {\n        return { code: 500, result: 'Not valid data composition' };\n      }\n    }\n    return { code: 200, result: 'OK' };\n  } else {\n    return { code: 500, result: 'Wrond data type' };\n  }\n};\n\nexport const isObject = (obj) => {\n  if (!obj) {\n    return false;\n  }\n  if (typeof obj === 'object' && !Array.isArray(obj)) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nexport const isValidEmail = (value) => {\n  if (!value || typeof value !== 'string') {\n    return false;\n  }\n  const validEmail = validator.isEmail(value) && !validator.isEmpty(value);\n  return validEmail;\n};"]}