{"version":3,"sources":["../../src/lib/db.js"],"names":["client","Client","node","requestTimeout","keepAlive","log","db","config","mysql","usersCollectionName","collectionName","users","tasksCollectionName","tasks","feedbackCollectionName","feedback","projectCollectionName","projects","record","tempRecord","key","response","hits","body","forEach","item","_source","query","entityType","from","size","sort","build","index","es","indexByType","console","error","code","result","search","esResult","esResponseHandler","JSON","stringify","Promise","resolve","reject","results","fields","length","catch","Error","err","table","preparedRecord","prepareRecord","id","command","create","refresh","values","update","doc","delete","user","login","password","encriptedPassword","CryptoJS","AES","encrypt","secretKey","toString","Object","assign","mysqlSearchByQuery","dbUser","email","dbEmail","addRecordMysql","insertId","find","e","decrypt","enc","Utf8","collection","get","docs","data","push","value","field","sortField","sortValue","esSearchByQuery","task","preparedTask","taskForMysql","project","mysqlRecord","taskWithId","addDocumentEs","esRecord","_id","deleteByIdMysql","deleteByIdEs","updateRecordMysql","updateDocumentEs","projectWithId","userId"],"mappings":"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","file":"db.js","sourcesContent":["import CryptoJS from 'crypto-js';\nimport bodybuilder from 'bodybuilder';\nimport { Client } from '@elastic/elasticsearch';\nimport { has } from 'lodash';\n\nconst client = new Client({\n  node: 'http://localhost:9200',\n  requestTimeout: 5000,\n  keepAlive: false,\n  log: 'debug'\n});\n\nexport default class db {\n  constructor ({config, db, mysql}) {\n    this.config = config;\n    this.db = db;\n    this.mysql = mysql;\n    this.usersCollectionName = config.db.collectionName.users;\n    this.tasksCollectionName = config.db.collectionName.tasks;\n    this.feedbackCollectionName = config.db.collectionName.feedback;\n    this.projectCollectionName = config.db.collectionName.projects;\n  };\n\n  prepareRecord (record) {\n    let tempRecord = { ...record };\n    for (let key in tempRecord) {\n      tempRecord[key] = tempRecord[key] ? tempRecord[key] : null\n    }\n    return tempRecord;\n  };\n\n  esResponseHandler (response) {\n    if (has(response, ['body', 'hits', 'hits'])) {\n      let hits = [];\n      response.body.hits.hits.forEach(item => {\n        hits = [...hits, item._source];\n      })\n      return hits\n    } else {\n      return []\n    }\n  };\n\n  async esSearchByQuery ({ query, entityType = 'task', from = 0, size = 50, sort = 'createdAt:desc' }) {\n    if (!query) {\n      query = bodybuilder().build();\n    }\n\n    const index = this.config.es.indexByType[entityType];\n\n    if (!index) {\n      console.error('Index not found');\n      return { code: 500, result: 'Index not found' };\n    }\n\n    try {\n      const esResult = await client.search({\n        from,\n        size,\n        index,\n        sort,\n        body: query\n      });\n      const response = this.esResponseHandler(esResult);\n      return { code: 200, result: response };\n    } catch (error) {\n      console.error(JSON.stringify(error));\n      return { code: 500, result: error };\n    }\n  };\n\n  mysqlSearchByQuery ({ query }) {\n    return new Promise ((resolve, reject) => {\n      this.mysql.query(query, function (error, results, fields) {\n        if (error) {\n          console.error(error);\n          return reject({ code: 500, result: 'Internal error' });\n        }\n\n        if (results && results.length) {\n          return resolve({ code: 200, result: results });\n        } else {\n          return resolve({ code: 404, result: 'Not found' });\n        }\n      });\n    }).catch(err => {\n      throw new Error(err);\n    })\n  }\n\n  async addRecordMysql ({ table, record }) {\n    return new Promise((resolve, reject) => {\n      if (!table || !record) {\n        return reject({ code: 404, result: 'Missing field or value' });\n      }\n\n      let preparedRecord = this.prepareRecord(record);\n      delete preparedRecord.id;\n      const command = `INSERT INTO ${table} SET ?`;\n      this.mysql.query(command, preparedRecord, (err, results) => {\n        if (err) {\n          console.error(err);\n          return reject({ code: 500, result: err });\n        }\n\n        return resolve({ code: 200, result: results });\n      })\n    })\n  };\n\n  async addDocumentEs ({ index, record }) {\n    if (!index || !record) {\n      return { code: 404, result: 'Missing field or value' };\n    }\n\n    try {\n      const result = await client.create({\n        index,\n        id: record.id,\n        refresh: true,\n        body: record\n      });\n\n      return { code: 200, result: result.body };\n    } catch (error) {\n      console.error(JSON.stringify(error));\n      return { code: 500, result: error };\n    }\n  };\n\n  updateRecordMysql ({ query, values }) {\n    return new Promise((resolve, reject) => {\n      if (!query || !values) {\n        return reject({ code: 404, result: 'Missing field or value' });\n      }\n\n      this.mysql.query(query, values, (err, results) => {\n        if (err) {\n          console.error(err);\n          return reject({ code: 500, result: err });\n        }\n\n        return resolve({ code: 200, result: 'OK' });\n      })\n    });\n  };\n\n  async updateDocumentEs ({ index, record }) {\n    if (!index || !record) {\n      return { code: 404, result: 'Missing field or value' };\n    }\n\n    try {\n      await client.update({\n        index,\n        id: record.id,\n        refresh: true,\n        body: {\n          doc: record\n        }\n      });\n\n      return { code: 200, result: 'OK' };\n    } catch (error) {\n      console.error(JSON.stringify(error));\n      return { code: 500, result: error };\n    }\n  };\n\n  async deleteByIdMysql ({ id, table }) {\n    if (!id || !table) {\n      return { code: 404, result: 'Missing field or value' };\n    }\n\n    this.mysql.query(`DELETE FROM ${table} WHERE id = ${id}`, (error, result) => {\n      if (error) {\n        console.error(error);\n        return { code: 500, result: error };\n      }\n      return { code: 200, result: 'OK' };\n    })\n  };\n\n  async deleteByIdEs ({ id, index }) {\n    if (!id || !index) {\n      return { code: 404, result: 'Missing field or value' };\n    }\n\n    try {\n      await client.delete({\n        index,\n        id,\n        refresh: true\n      });\n      return { code: 200, result: 'OK' };\n    } catch (error) {\n      console.error(error);\n      return { code: 500, result: error };\n    }\n  };\n\n  async registerUser (user) {\n    if (!user.login || !user.password) {\n      console.error('Login or password is missing during registration');\n      return { code: 404, result: 'Missing login or password' };\n    }\n    const encriptedPassword = CryptoJS.AES.encrypt(user.password, this.config.db.secretKey).toString();\n    Object.assign(user, { password: encriptedPassword });\n    try {\n      const dbUser = await this.mysqlSearchByQuery({ query: `SELECT login FROM users WHERE login = '${user.login}'` });\n      const dbEmail = await this.mysqlSearchByQuery({ query: `SELECT email FROM users WHERE email = '${user.email}'` });\n\n      if (dbUser && dbUser.code === 200) {\n        return { code: 500, result: 'Login busy' };\n      } else if (dbEmail && dbEmail.code === 200) {\n        return { code: 500, result: 'Email busy' };\n      } else {\n        const result = await this.addRecordMysql({ table: 'users', record: user });\n        return { code: 200, result: result.result.insertId };\n      }\n    } catch (error) {\n      console.error(error);\n      return { code: 500, result: error };\n    }\n  };\n\n  async getUser ({ login }) {\n    if (!login) {\n      console.error('Login is required field');\n      return { code: 404, result: 'Login is required field' };\n    }\n\n    try {\n      const result = await this.mysqlSearchByQuery({ query: `SELECT * FROM users WHERE login='${login}'` });\n\n      if (result.code === 200 && result.result.length) {\n        let user = result.result.find(e => e.login === login);\n        user.password = CryptoJS.AES.decrypt(user.password, this.config.db.secretKey).toString(CryptoJS.enc.Utf8);\n        return { code: result.code, result: user };\n      } else {\n        return { code: 404, result: 'User not found' };\n      }\n    } catch (error) {\n      console.error(error);\n      return { code: 500, result: error };\n    }\n  };\n\n  async getAllUsers () {\n    try {\n      const tasks = await this.db.collection(this.usersCollectionName).get();\n      let result = [];\n      \n      tasks.docs.forEach(doc => {\n        let data = doc.data();\n        result.push(data);\n      });\n\n      return result;\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  async getTasks ({ value, field = 'author', sortField = 'createdAt',  sortValue = 'desc' }) {\n    if (!value) {\n      console.error('Value is required field');\n      return { code: 404, result: 'Value is required field' };\n    }\n    try {\n      let query = bodybuilder().query('term', field, value).build();\n      const result = await this.esSearchByQuery({\n        query,\n        entityType: 'task',\n        sort: `${sortField}:${sortValue}`\n      })\n\n      return result;\n    } catch (error) {\n      console.error(JSON.stringify(error));\n      return { code: 500, result: error };\n    }\n  };\n\n  async getAllTasks () {\n    try {\n      const tasks = await this.db.collection(this.tasksCollectionName).get();\n      let result = [];\n      \n      tasks.docs.forEach(doc => {\n        let data = doc.data();\n        result.push(data);\n      });\n\n      return result;\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  async addTask ({ task }) {\n    if (!task) {\n      console.error('Task is required field');\n      return { code: 404, result: 'Task is required field' };\n    }\n    try {\n      const preparedTask = this.prepareRecord(task);\n      const taskForMysql = {\n        ...preparedTask,\n        project: preparedTask.project ? preparedTask.project.id : preparedTask.project\n      };\n\n      const mysqlRecord = await this.addRecordMysql({ table: 'tasks', record: taskForMysql });\n      let taskWithId = { ...preparedTask, id: mysqlRecord.result.insertId };\n      const esRecord = await this.addDocumentEs({ index: 'tasks', record: taskWithId });\n\n      if (esRecord) {\n        return { code: 200, result: esRecord.result._id };\n      } else {\n        return { code: 500, result: \"Task doesn't add\" };\n      }\n    } catch (error) {\n      console.error(error);\n      return { code: 500, result: error };\n    }\n  };\n\n  async deleteTask ({ id }) {\n    if (!id) {\n      console.error('Task id is required field');\n      return { code: 404, result: 'Task id is required field' };\n    }\n    try {\n      await this.deleteByIdMysql({ id, table: 'tasks' });\n      await this.deleteByIdEs({ id, index: 'tasks' });\n\n      return { code: 200, result: 'OK' };\n    } catch (error) {\n      console.error(error);\n      return { code: 500, result: error };\n    }\n  };\n\n  async updateTask ({ task }) {\n    if (!task) {\n      console.error('Task is required field');\n      return { code: 404, result: 'Task is required field' };\n    }\n    try {\n      const preparedTask = this.prepareRecord(task);\n      const taskForMysql = {\n        ...preparedTask,\n        project: preparedTask.project ? preparedTask.project.id : preparedTask.project\n      };\n\n      await this.updateRecordMysql({ query: `UPDATE tasks SET ? WHERE id = '${task.id}'`, values: taskForMysql });\n      await this.updateDocumentEs({ index: 'tasks', record: preparedTask });\n\n      return { code: 200, result: 'OK' };\n    } catch (error) {\n      console.error(error);\n      return { code: 500, result: error };\n    }\n  };\n\n  async sendFeedback ({ data }) {\n    if (!data) {\n      console.error('Missing required fields');\n      return { code: 404, result: 'Missing required fields' };\n    }\n    try {\n      const result = await this.addRecordMysql({ table: 'feedback', record: data });\n\n      if (result) {\n        return { code: 200, result: result.result.insertId };\n      } else {\n        return { code: 500, result: \"Feedback doesn't add\" };\n      }\n    } catch (error) {\n      console.error(error);\n      return { code: 500, result: error };\n    }\n  };\n\n  async getAllFeedbacks () {\n    try {\n      const tasks = await this.db.collection(this.feedbackCollectionName).get();\n      let result = [];\n      \n      tasks.docs.forEach(doc => {\n        let data = doc.data();\n        result.push(data);\n      });\n\n      return result;\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  async createProject ({ project }) {\n    if (!project) {\n      console.error('Missing required fields');\n      return { code: 404, result: 'Missing required fields' };\n    }\n    try {\n      const mysqlRecord = await this.addRecordMysql({ table: 'projects', record: project });\n      let projectWithId = { ...project, id: mysqlRecord.result.insertId };\n      const esRecord = await this.addDocumentEs({ index: 'projects', record: projectWithId });\n\n      if (esRecord) {\n        return { code: 200, result: esRecord.result._id };\n      } else {\n        return { code: 500, result: \"Project doesn't add\" };\n      }\n    } catch (error) {\n      console.error(error);\n      return { code: 500, result: error };\n    }\n  };\n\n  async getProjects ({ userId }) {\n    if (!userId) {\n      console.error('User id is required field');\n      return { code: 404, result: 'User id is required field' };\n    }\n    try {\n      let query = bodybuilder().query('term', 'author', userId).build();\n      const result = await this.esSearchByQuery({\n        query,\n        entityType: 'project'\n      })\n\n      return result;\n    } catch (error) {\n      console.error(error);\n      return { code: 500, result: error };\n    }\n  };\n\n  async getAllProjects () {\n    try {\n      const tasks = await this.db.collection(this.projectCollectionName).get();\n      let result = [];\n      \n      tasks.docs.forEach(doc => {\n        let data = doc.data();\n        result.push(data);\n      });\n\n      return result;\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  async deleteProject ({ id }) {\n    if (!id) {\n      console.error('Project id is required field');\n      return { code: 404, result: 'Project id is required field' };\n    }\n    try {\n      await this.deleteByIdMysql({ id, table: 'projects' });\n      await this.deleteByIdEs({ id, index: 'projects' });\n\n      return { code: 200, result: 'OK' };\n    } catch (error) {\n      console.error(error);\n      return { code: 500, result: error };\n    }\n  };\n}"]}