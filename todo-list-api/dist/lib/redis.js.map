{"version":3,"sources":["../../src/lib/redis.js"],"names":["RedisWrapper","params","instance","redis","createClient","config","expirePeriod","expire","jsonify","blacklist","push","connected","on","error","console","message","log","key","value","expireTime","set","cacheKey","seconds","Promise","resolve","reject","isConnected","get","err","reply","del","module","exports"],"mappings":";;;;AAAA;;;;AACA;;;;AACA;;;;;;;;IAEMA,Y;AACJ,wBAAaC,MAAb,EAAqB;AAAA;;AAAA;;AACnB,SAAKC,QAAL,GAAgB,4BAAQC,gBAAMC,YAAN,CAAmBC,iBAAOF,KAA1B,CAAR,CAAhB;AACA,SAAKG,YAAL,GAAoBL,OAAOM,MAAP,IAAiB,KAArC;AACAC,2BAAQC,SAAR,CAAkBC,IAAlB,CAAuB,QAAvB;;AAEA,SAAKC,SAAL,GAAiB,EAAjB;AACA,SAAKT,QAAL,CAAcU,EAAd,CAAiB,OAAjB,EAA0B,UAACC,KAAD,EAAW;AACnC,YAAKF,SAAL,GAAiB,KAAjB;AACAG,cAAQD,KAAR,CAAc,wBAAd,EAAwCA,MAAME,OAA9C;AACD,KAHD,EAGGH,EAHH,CAGM,OAHN,EAGe,YAAM;AACnBE,cAAQE,GAAR,CAAY,iBAAZ;AACA,YAAKL,SAAL,GAAiB,IAAjB;AACD,KAND;AAOD;;;;wBAEIM,G,EAAKC,K,EAAOC,U,EAAY;AAC3B,WAAKjB,QAAL,CAAckB,GAAd,CAAkBH,GAAlB,EAAuBC,KAAvB;AACA,WAAKhB,QAAL,CAAcK,MAAd,CAAqBU,GAArB,EAA0BE,cAAc,KAAKb,YAA7C;AACD;;;kCAEce,Q,EAAUC,O,EAAS;AAChC,WAAKpB,QAAL,CAAcK,MAAd,CAAqBc,QAArB,EAA+BC,OAA/B;AACD;;;wBAEID,Q,EAAU;AAAA;;AACb,aAAO,IAAIE,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,YAAI,OAAKC,WAAL,EAAJ,EAAwB;AACtB,iBAAO,OAAKxB,QAAL,CAAcyB,GAAd,CAAkBN,QAAlB,EAA4B,UAASO,GAAT,EAAcC,KAAd,EAAqB;AACtD,mBAAOL,QAAQK,SAAS,IAAjB,CAAP;AACD,WAFM,CAAP;AAGD,SAJD,MAIO;AACLf,kBAAQD,KAAR,CAAc,uBAAd;AACA,iBAAOW,QAAQ,IAAR,CAAP;AACD;AACF,OATM,CAAP;AAUD;;;kCAEc;AACb,aAAO,KAAKb,SAAZ;AACD;;;6BAESM,G,EAAK;AACb,WAAKf,QAAL,CAAc4B,GAAd,CAAkBb,GAAlB;AACD;;;;;;AAGHc,OAAOC,OAAP,GAAiBhC,YAAjB","file":"redis.js","sourcesContent":["import redis from 'redis';\nimport jsonify from 'redis-jsonify';\nimport config from '../../config/config.json';\n\nclass RedisWrapper {\n  constructor (params) {\n    this.instance = jsonify(redis.createClient(config.redis));\n    this.expirePeriod = params.expire || 86400;\n    jsonify.blacklist.push('expire');\n\n    this.connected = '';\n    this.instance.on('error', (error) => {\n      this.connected = false;\n      console.error('Redis connection error', error.message);\n    }).on('ready', () => {\n      console.log('Redis connected');\n      this.connected = true;\n    });\n  }\n\n  set (key, value, expireTime) {\n    this.instance.set(key, value);\n    this.instance.expire(key, expireTime || this.expirePeriod);\n  }\n\n  setExpireTime (cacheKey, seconds) {\n    this.instance.expire(cacheKey, seconds);\n  }\n\n  get (cacheKey) {\n    return new Promise((resolve, reject) => {\n      if (this.isConnected()) {\n        return this.instance.get(cacheKey, function(err, reply) {\n          return resolve(reply || null);\n        });\n      } else {\n        console.error('Redis disconnected...');\n        return resolve(null);\n      }\n    })\n  }\n\n  isConnected () {\n    return this.connected;\n  }\n\n  removeBy (key) {\n    this.instance.del(key);\n  }\n}\n\nmodule.exports = RedisWrapper;\n"]}