{"version":3,"sources":["../../src/api/tasks.js"],"names":["redisClient","Redis","expire","config","db","api","database","Database","get","req","res","token","query","send","result","code","status","user","userId","id","getTasks","console","error","put","task","body","author","addTask","post","deleteTask","updateTask"],"mappings":"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","file":"tasks.js","sourcesContent":["import { Router } from 'express';\nimport Database from '../lib/db';\nimport Redis from '../lib/redis';\n\nconst redisClient = new Redis({ expire: 3600 });\n\nexport default ({ config, db }) => {\n  const api = Router();\n  const database = new Database({ config, db });\n\n  api.get('/list', async function (req, res) {\n    const token = req.query.token;\n    if (!token) {\n      return res.send({ result: 'Token is required field', code: 500 }).status(500);\n    }\n    try {\n      const user = await redisClient.get(token);\n      if (user) {\n        const userId = user.id;\n        const result = await database.getTasks({ userId });\n        if (result && result.code === 200) {\n          return res.send(result).status(result.code);\n        } else {\n          return res.send(result).status(404);\n        }\n      } else {\n        return res.send({ result: 'User is not authorized', code: 401 }).status(401);\n      }\n    } catch (error) {\n      console.error(error);\n      return res.send({ result: 'Internal error', code: 500 }).status(500);\n    }\n  });\n\n  api.put('/addTask', async function (req, res) {\n    const token = req.query.token;\n    let task = req.body;\n    if (!task || !token) {\n      return res.send({ result: 'Missing required fields', code: 500 }).status(500);\n    }\n    try {\n      const user = await redisClient.get(token);\n      if (user) {\n        task = { ...task, author: user.id };\n        const result = await database.addTask({ task });\n        return res.send(result).status(result.code);\n      } else {\n        return res.send({ result: 'User is not authorized', code: 401 }).status(401);\n      }\n    } catch (error) {\n      console.error(error);\n      return res.send({ result: 'Internal error', code: 500 }).status(500);\n    }\n  });\n\n  api.post('/deleteTask', async function (req, res) {\n    const token = req.query.token;\n    const { id } = req.body;\n    if (!token || !id) {\n      return res.send({ result: 'Missing required fields', code: 500 }).status(500);\n    }\n    try {\n      const user = await redisClient.get(token);\n      if (user) {\n        const result = await database.deleteTask({ id });\n        return res.send(result).status(result.code);\n      } else {\n        return res.send({ result: 'User is not authorized', code: 401 }).status(401);\n      }\n    } catch (error) {\n      console.error(error);\n      return res.send({ result: 'Internal error', code: 500 }).status(500);\n    }\n  });\n\n  api.put('/updateTask', async function (req, res) {\n    const token = req.query.token;\n    const task = req.body;\n    if (!token || !task) {\n      return res.send({ result: 'Missing required fields', code: 500 }).status(500);\n    }\n    try {\n      const user = await redisClient.get(token);\n      if (user) {\n        const result = await database.updateTask({ task });\n        return res.send(result).status(result.code);\n      } else {\n        return res.send({ result: 'User is not authorized', code: 401 }).status(401);\n      }\n    } catch (error) {\n      console.error(error);\n      return res.send({ result: 'Internal error', code: 500 }).status(500);\n    }\n  });\n\n  return api;\n}"]}