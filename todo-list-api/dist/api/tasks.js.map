{"version":3,"sources":["../../src/api/tasks.js"],"names":["config","db","mysql","redisClient","api","database","Database","get","req","res","query","token","field","value","sort","send","result","code","status","user","userId","id","sortField","split","sortValue","getTasks","console","error","put","task","body","author","createdAt","Date","now","addTask","delete","deleteTask","projectId","tasksList","length","updateTask"],"mappings":"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","file":"tasks.js","sourcesContent":["import { Router } from 'express';\nimport Database from '../lib/db';\n\nexport default ({ config, db, mysql, redisClient }) => {\n  const api = Router();\n  const database = new Database({ config, db, mysql });\n\n  api.get('/list', async function (req, res) {\n    const { token, field, value, sort } = req.query;\n\n    if (!token) {\n      return res.send({ result: 'Token is required field', code: 500 }).status(500);\n    }\n    \n    try {\n      const user = await redisClient.get(token);\n      if (user) {\n        const userId = user.id;\n        let result;\n        const sortField = sort.split(':')[0];\n        const sortValue = sort.split(':')[1];\n\n        if (field && value) {\n          result = await database.getTasks({ value, field, sortField, sortValue });\n        } else {\n          result = await database.getTasks({ value: userId, sortField, sortValue });\n        }\n\n        if (result && result.code === 200) {\n          return res.send(result).status(result.code);\n        } else {\n          return res.send(result).status(404);\n        }\n      } else {\n        return res.send({ result: 'User is not authorized', code: 401 }).status(401);\n      }\n    } catch (error) {\n      console.error(error);\n      return res.send({ result: 'Internal error', code: 500 }).status(500);\n    }\n  });\n\n  api.put('/addTask', async function (req, res) {\n    const token = req.query.token;\n    let task = req.body;\n    if (!task || !token) {\n      return res.send({ result: 'Missing required fields', code: 500 }).status(500);\n    }\n    try {\n      const user = await redisClient.get(token);\n      if (user) {\n        task = {\n          ...task,\n          author: user.id,\n          createdAt: Date.now()\n        };\n\n        const result = await database.addTask({ task });\n\n        return res.send(result).status(result.code);\n      } else {\n        return res.send({ result: 'User is not authorized', code: 401 }).status(401);\n      }\n    } catch (error) {\n      console.error(error);\n      return res.send({ result: 'Internal error', code: 500 }).status(500);\n    }\n  });\n\n  api.delete('/deleteTask', async function (req, res) {\n    const token = req.query.token;\n    const { id } = req.body;\n    if (!token || !id) {\n      return res.send({ result: 'Missing required fields', code: 500 }).status(500);\n    }\n    try {\n      const user = await redisClient.get(token);\n      if (user) {\n        const result = await database.deleteTask({ id });\n        return res.send(result).status(result.code);\n      } else {\n        return res.send({ result: 'User is not authorized', code: 401 }).status(401);\n      }\n    } catch (error) {\n      console.error(error);\n      return res.send({ result: 'Internal error', code: 500 }).status(500);\n    }\n  });\n\n  api.delete('/deleteByProjectId', async function (req, res) {\n    const { token, projectId } = req.query;\n    if (!token || !projectId) {\n      return res.send({ result: 'Missing required fields', code: 500 }).status(500);\n    }\n    try {\n      const user = await redisClient.get(token);\n      if (user) {\n        const tasksList = await database.getTasks({ value: projectId, field: 'project.id' });\n        if (tasksList.code === 200 && tasksList.result.length) {\n          for (let task of tasksList.result) {\n            const result = await database.deleteTask({ id: task.id });\n          }\n          return res.send({ result: 'OK', code: 200 }).status(200);\n        } else {\n          return res.send({ result: `User doesn't have a tasks with project id ${projectId}`, code: 404 }).status(404);\n        }\n      } else {\n        return res.send({ result: 'User is not authorized', code: 401 }).status(401);\n      }\n    } catch (error) {\n      console.error(error);\n      return res.send({ result: 'Internal error', code: 500 }).status(500);\n    }\n  });\n\n  api.put('/updateTask', async function (req, res) {\n    const token = req.query.token;\n    const task = req.body;\n    if (!token || !task) {\n      return res.send({ result: 'Missing required fields', code: 500 }).status(500);\n    }\n    try {\n      const user = await redisClient.get(token);\n      if (user) {\n        const result = await database.updateTask({ task });\n        return res.send(result).status(result.code);\n      } else {\n        return res.send({ result: 'User is not authorized', code: 401 }).status(401);\n      }\n    } catch (error) {\n      console.error(error);\n      return res.send({ result: 'Internal error', code: 500 }).status(500);\n    }\n  });\n\n  return api;\n}"]}