{"version":3,"sources":["../../src/api/projects.js"],"names":["config","db","mysql","redisClient","api","database","Database","get","req","res","token","query","send","result","code","status","user","userId","id","getProjects","console","error","post","project","body","author","createdAt","Date","now","createProject","delete","deleteProject"],"mappings":"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","file":"projects.js","sourcesContent":["import { Router } from 'express';\nimport Database from '../lib/db';\n\nexport default ({ config, db, mysql, redisClient }) => {\n  const api = Router();\n  const database = new Database({ config, db, mysql });\n\n  api.get('/list', async function (req, res) {\n    const { token } = req.query;\n    if (!token) {\n      return res.send({ result: 'Token is required field', code: 500 }).status(500);\n    }\n    try {\n      const user = await redisClient.get(token);\n      if (user) {\n        const userId = user.id;\n        const result = await database.getProjects({ userId });\n        return res.send(result).status(result.code);\n      } else {\n        return res.send({ result: 'User is not authorized', code: 401 }).status(401);\n      }\n    } catch (error) {\n      console.error(error);\n      return res.send({ result: 'Internal error', code: 500 }).status(500);\n    }\n  });\n\n  api.post('/create', async function (req, res) {\n    const { token } = req.query;\n    let project = req.body;\n    if (!token || !project) {\n      return res.send({ result: 'Missing required fields', code: 500 }).status(500);\n    }\n    try {\n      const user = await redisClient.get(token);\n      if (user) {\n        project = { ...project, author: user.id, createdAt: Date.now() };\n        const result = await database.createProject({ project });\n        return res.send(result).status(result.code);\n      } else {\n        return res.send({ result: 'User is not authorized', code: 401 }).status(401);\n      }\n    } catch (error) {\n      console.error(error);\n      return res.send({ result: 'Internal error', code: 500 }).status(500);\n    }\n  });\n\n  api.delete('/delete', async function (req, res) {\n    const { token, id } = req.query;\n    if (!token || !id) {\n      return res.send({ result: 'Missing required fields', code: 500 }).status(500);\n    }\n    try {\n      const user = await redisClient.get(token);\n      if (user) {\n        const result = await database.deleteProject({ id });\n        return res.send(result).status(result.code);\n      } else {\n        return res.send({ result: 'User is not authorized', code: 401 }).status(401);\n      }\n    } catch (error) {\n      console.error(error);\n      return res.send({ result: 'Internal error', code: 500 }).status(500);\n    }\n  });\n\n  return api;\n};"]}