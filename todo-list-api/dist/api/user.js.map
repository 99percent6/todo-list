{"version":3,"sources":["../../src/api/user.js"],"names":["tokgen","TokenGenerator","BASE58","config","db","mysql","redisClient","api","database","Database","post","req","res","user","body","login","password","repeatedPassword","name","email","send","result","code","status","isValidData","registerUser","console","error","getUser","userPassword","token","generate","isConnected","expire","set","query","removeBy","get","data","title","content","sendFeedback"],"mappings":"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","file":"user.js","sourcesContent":["import { Router } from 'express';\nimport Database from '../lib/db';\nimport TokenGenerator from 'uuid-token-generator';\nimport { isValidRegistrationData, isValidEmail } from '../helpers/user';\n\nconst tokgen = new TokenGenerator(256, TokenGenerator.BASE58);\n\nexport default ({ config, db, mysql, redisClient }) => {\n  const api = Router();\n  const database = new Database({ config, db, mysql });\n\n  api.post('/registration', async function(req, res) {\n    let user = req.body;\n    const { login, password, repeatedPassword, name, email } = user;\n    if (!login || !password || !repeatedPassword || !name || !email) {\n      return res.send({result: 'Missing required field', code: 500}).status(500);\n    }\n    const isValidData = isValidRegistrationData(user);\n    if (isValidData.code !== 200) {\n      return res.send(isValidData).status(isValidData.code);\n    }\n    try {\n      delete user.repeatedPassword;\n      const result = await database.registerUser(user);\n      if (result.code === 200) {\n        return res.send(result).status(result.code);\n      } else {\n        return res.send(result).status(result.code);\n      }\n    } catch (error) {\n      console.error(error);\n      res.send({ result: 'Internal error', code: 500 }).status(500);\n    }\n  });\n\n  api.post('/login', async function(req, res) {\n    const { login, password } = req.body;\n    if (!login || !password) {\n      return res.send({result: 'Missing required field', code: 500}).status(500);\n    }\n    try {\n      const result = await database.getUser({ login });\n\n      if (result.code === 200) {\n        const user = result.result;\n        const userPassword = user.password;\n        if (userPassword === password) {\n          const token = tokgen.generate();\n          if (redisClient.isConnected()) {\n            const expire = 60 * 60 * 24 * 30;\n            redisClient.set(token, user, expire);\n          }\n          return res.send({ result: token, code: result.code }).status(result.code);\n        } else {\n          return res.send({result: 'Forbidden.Wrong password', code: 403}).status(403);\n        }\n      } else {\n        return res.send(result).status(result.code);\n      }\n    } catch (error) {\n      console.error(error);\n      return res.send({ result: 'Internal error', code: 500 }).status(500);\n    }\n  });\n\n  api.post('/logout', async function(req, res) {\n    const token = req.query.token;\n    if (!token) {\n      return res.send({result: 'Missing required field', code: 500}).status(500);\n    }\n    if (redisClient.isConnected()) {\n      redisClient.removeBy(token);\n      return res.send({ result: 'OK', code: 200 }).status(200);\n    } else {\n      console.error('Redis not connect');\n      return res.send({ result: 'Internal error', code: 500 }).status(500);\n    }\n  });\n\n  api.get('/getUser', async function(req, res) {\n    const token = req.query.token;\n    if (!token) {\n      return res.send({result: 'Missing required field', code: 500}).status(500);\n    }\n    try {\n      const user = await redisClient.get(token);\n      if (user) {\n        const result = await database.getUser({ login: user.login });\n        if (result.code === 200) {\n          if (result.result.password) delete result.result.password;\n          return res.send({result: result.result, code: result.code}).status(result.code);\n        } else {\n          return res.send(result).status(result.code);\n        }\n      } else {\n        return res.send({ result: 'User not authorized', code: 401 });\n      }\n    } catch (error) {\n      console.error(error);\n      res.send({ result: 'Internal error', code: 500 }).status(500);\n    }\n  });\n\n  api.post('/sendFeedback', async function(req, res) {\n    const data = req.body;\n    const { title, content, email } = data;\n    if (!title || !content || !email) {\n      return res.send({result: 'Missing required field', code: 500}).status(500);\n    }\n    if (!isValidEmail(email)) {\n      return res.send({result: 'Email is not valid', code: 500}).status(500);\n    }\n    const result = await database.sendFeedback({ data });\n    return res.send(result).status(result.code);\n  });\n\n  return api;\n};"]}