{"version":3,"sources":["../../src/api/user.js"],"names":["redisClient","Redis","expire","tokgen","TokenGenerator","BASE58","config","db","api","database","Database","post","req","res","user","body","login","password","repeatedPassword","name","email","send","result","code","status","registerUser","console","error","getUser","userPassword","token","generate","isConnected","set","query","removeBy","get"],"mappings":";;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;;;;;;;AAEA,IAAMA,cAAc,IAAIC,eAAJ,CAAU,EAAEC,QAAQ,IAAV,EAAV,CAApB;AACA,IAAMC,SAAS,IAAIC,4BAAJ,CAAmB,GAAnB,EAAwBA,6BAAeC,MAAvC,CAAf;;kBAEe,gBAAoB;AAAA,MAAjBC,MAAiB,QAAjBA,MAAiB;AAAA,MAATC,EAAS,QAATA,EAAS;;AACjC,MAAMC,MAAM,sBAAZ;AACA,MAAMC,WAAW,IAAIC,YAAJ,CAAa,EAAEJ,cAAF,EAAUC,MAAV,EAAb,CAAjB;;AAEAC,MAAIG,IAAJ,CAAS,eAAT;AAAA,wEAA0B,iBAAeC,GAAf,EAAoBC,GAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AACpBC,kBADoB,GACbF,IAAIG,IADS;AAEhBC,mBAFgB,GAEmCF,IAFnC,CAEhBE,KAFgB,EAETC,QAFS,GAEmCH,IAFnC,CAETG,QAFS,EAECC,gBAFD,GAEmCJ,IAFnC,CAECI,gBAFD,EAEmBC,IAFnB,GAEmCL,IAFnC,CAEmBK,IAFnB,EAEyBC,KAFzB,GAEmCN,IAFnC,CAEyBM,KAFzB;;AAAA,oBAGpB,CAACJ,KAAD,IAAU,CAACC,QAAX,IAAuB,CAACC,gBAAxB,IAA4C,CAACC,IAA7C,IAAqD,CAACC,KAHlC;AAAA;AAAA;AAAA;;AAAA,+CAIfP,IAAIQ,IAAJ,CAAS,EAACC,QAAQ,wBAAT,EAAmCC,MAAM,GAAzC,EAAT,EAAwDC,MAAxD,CAA+D,GAA/D,CAJe;;AAAA;AAAA;;AAOtB,qBAAOV,KAAKI,gBAAZ;AAPsB;AAAA,qBAQDT,SAASgB,YAAT,CAAsBX,IAAtB,CARC;;AAAA;AAQhBQ,oBARgB;;AAAA,oBASlBA,OAAOC,IAAP,KAAgB,GATE;AAAA;AAAA;AAAA;;AAAA,+CAUbV,IAAIQ,IAAJ,CAASC,MAAT,EAAiBE,MAAjB,CAAwBF,OAAOC,IAA/B,CAVa;;AAAA;AAAA,+CAYbV,IAAIQ,IAAJ,CAASC,MAAT,EAAiBE,MAAjB,CAAwBF,OAAOC,IAA/B,CAZa;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAetBG,sBAAQC,KAAR;AACAd,kBAAIQ,IAAJ,CAAS,EAAEC,QAAQ,gBAAV,EAA4BC,MAAM,GAAlC,EAAT,EAAkDC,MAAlD,CAAyD,GAAzD;;AAhBsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA1B;;AAAA;AAAA;AAAA;AAAA;;AAoBAhB,MAAIG,IAAJ,CAAS,QAAT;AAAA,wEAAmB,kBAAeC,GAAf,EAAoBC,GAApB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,0BACWD,IAAIG,IADf,EACTC,KADS,aACTA,KADS,EACFC,QADE,aACFA,QADE;;AAAA,oBAEb,CAACD,KAAD,IAAU,CAACC,QAFE;AAAA;AAAA;AAAA;;AAAA,gDAGRJ,IAAIQ,IAAJ,CAAS,EAACC,QAAQ,wBAAT,EAAmCC,MAAM,GAAzC,EAAT,EAAwDC,MAAxD,CAA+D,GAA/D,CAHQ;;AAAA;AAAA;AAAA;AAAA,qBAMMf,SAASmB,OAAT,CAAiB,EAAEZ,YAAF,EAAjB,CANN;;AAAA;AAMTM,oBANS;;AAAA,oBAOXA,OAAOC,IAAP,KAAgB,GAPL;AAAA;AAAA;AAAA;;AAQPT,kBARO,GAQAQ,OAAOA,MARP;AASPO,0BATO,GASQf,KAAKG,QATb;;AAAA,oBAUTY,iBAAiBZ,QAVR;AAAA;AAAA;AAAA;;AAWLa,mBAXK,GAWG3B,OAAO4B,QAAP,EAXH;;AAYX,kBAAI/B,YAAYgC,WAAZ,EAAJ,EAA+B;AACvB9B,sBADuB,GACd,KAAK,EAAL,GAAU,EAAV,GAAe,EADD;;AAE7BF,4BAAYiC,GAAZ,CAAgBH,KAAhB,EAAuBhB,IAAvB,EAA6BZ,MAA7B;AACD;AAfU,gDAgBJW,IAAIQ,IAAJ,CAAS,EAAEC,QAAQQ,KAAV,EAAiBP,MAAMD,OAAOC,IAA9B,EAAT,EAA+CC,MAA/C,CAAsDF,OAAOC,IAA7D,CAhBI;;AAAA;AAAA,gDAkBJV,IAAIQ,IAAJ,CAAS,EAACC,QAAQ,0BAAT,EAAqCC,MAAM,GAA3C,EAAT,EAA0DC,MAA1D,CAAiE,GAAjE,CAlBI;;AAAA;AAAA;AAAA;;AAAA;AAAA,gDAqBNX,IAAIQ,IAAJ,CAASC,MAAT,EAAiBE,MAAjB,CAAwBF,OAAOC,IAA/B,CArBM;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAwBfG,sBAAQC,KAAR;AAxBe,gDAyBRd,IAAIQ,IAAJ,CAAS,EAAEC,QAAQ,gBAAV,EAA4BC,MAAM,GAAlC,EAAT,EAAkDC,MAAlD,CAAyD,GAAzD,CAzBQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAnB;;AAAA;AAAA;AAAA;AAAA;;AA6BAhB,MAAIG,IAAJ,CAAS,SAAT;AAAA,wEAAoB,kBAAeC,GAAf,EAAoBC,GAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AACZiB,mBADY,GACJlB,IAAIsB,KAAJ,CAAUJ,KADN;;AAAA,kBAEbA,KAFa;AAAA;AAAA;AAAA;;AAAA,gDAGTjB,IAAIQ,IAAJ,CAAS,EAACC,QAAQ,wBAAT,EAAmCC,MAAM,GAAzC,EAAT,EAAwDC,MAAxD,CAA+D,GAA/D,CAHS;;AAAA;AAAA,mBAKdxB,YAAYgC,WAAZ,EALc;AAAA;AAAA;AAAA;;AAMhBhC,0BAAYmC,QAAZ,CAAqBL,KAArB;AANgB,gDAOTjB,IAAIQ,IAAJ,CAAS,EAAEC,QAAQ,IAAV,EAAgBC,MAAM,GAAtB,EAAT,EAAsCC,MAAtC,CAA6C,GAA7C,CAPS;;AAAA;AAShBE,sBAAQC,KAAR,CAAc,mBAAd;AATgB,gDAUTd,IAAIQ,IAAJ,CAAS,EAAEC,QAAQ,gBAAV,EAA4BC,MAAM,GAAlC,EAAT,EAAkDC,MAAlD,CAAyD,GAAzD,CAVS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAApB;;AAAA;AAAA;AAAA;AAAA;;AAcAhB,MAAI4B,GAAJ,CAAQ,UAAR;AAAA,wEAAoB,kBAAexB,GAAf,EAAoBC,GAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AACZiB,mBADY,GACJlB,IAAIsB,KAAJ,CAAUJ,KADN;;AAAA,kBAEbA,KAFa;AAAA;AAAA;AAAA;;AAAA,gDAGTjB,IAAIQ,IAAJ,CAAS,EAACC,QAAQ,wBAAT,EAAmCC,MAAM,GAAzC,EAAT,EAAwDC,MAAxD,CAA+D,GAA/D,CAHS;;AAAA;AAAA;AAAA;AAAA,qBAMGxB,YAAYoC,GAAZ,CAAgBN,KAAhB,CANH;;AAAA;AAMVhB,kBANU;;AAAA,mBAOZA,IAPY;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAQOL,SAASmB,OAAT,CAAiB,EAAEZ,OAAOF,KAAKE,KAAd,EAAjB,CARP;;AAAA;AAQRM,oBARQ;;AAAA,oBASVA,OAAOC,IAAP,KAAgB,GATN;AAAA;AAAA;AAAA;;AAUZ,kBAAID,OAAOA,MAAP,CAAcL,QAAlB,EAA4B,OAAOK,OAAOA,MAAP,CAAcL,QAArB;AAVhB,gDAWLJ,IAAIQ,IAAJ,CAAS,EAACC,QAAQA,OAAOA,MAAhB,EAAwBC,MAAMD,OAAOC,IAArC,EAAT,EAAqDC,MAArD,CAA4DF,OAAOC,IAAnE,CAXK;;AAAA;AAAA,gDAaLV,IAAIQ,IAAJ,CAASC,MAAT,EAAiBE,MAAjB,CAAwBF,OAAOC,IAA/B,CAbK;;AAAA;AAAA;AAAA;;AAAA;AAAA,gDAgBPV,IAAIQ,IAAJ,CAAS,EAAEC,QAAQ,qBAAV,EAAiCC,MAAM,GAAvC,EAAT,CAhBO;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAmBhBG,sBAAQC,KAAR;AACAd,kBAAIQ,IAAJ,CAAS,EAAEC,QAAQ,gBAAV,EAA4BC,MAAM,GAAlC,EAAT,EAAkDC,MAAlD,CAAyD,GAAzD;;AApBgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAApB;;AAAA;AAAA;AAAA;AAAA;;AAwBA,SAAOhB,GAAP;AACD,C","file":"user.js","sourcesContent":["import { Router } from 'express';\nimport Database from '../lib/db';\nimport Redis from '../lib/redis';\nimport TokenGenerator from 'uuid-token-generator';\n\nconst redisClient = new Redis({ expire: 3600 });\nconst tokgen = new TokenGenerator(256, TokenGenerator.BASE58);\n\nexport default ({ config, db }) => {\n  const api = Router();\n  const database = new Database({ config, db });\n\n  api.post('/registration', async function(req, res) {\n    let user = req.body;\n    const { login, password, repeatedPassword, name, email } = user;\n    if (!login || !password || !repeatedPassword || !name || !email) {\n      return res.send({result: 'Missing required field', code: 500}).status(500);\n    }\n    try {\n      delete user.repeatedPassword;\n      const result = await database.registerUser(user);\n      if (result.code === 200) {\n        return res.send(result).status(result.code);\n      } else {\n        return res.send(result).status(result.code);\n      }\n    } catch (error) {\n      console.error(error);\n      res.send({ result: 'Internal error', code: 500 }).status(500);\n    }\n  });\n\n  api.post('/login', async function(req, res) {\n    const { login, password } = req.body;\n    if (!login || !password) {\n      return res.send({result: 'Missing required field', code: 500}).status(500);\n    }\n    try {\n      const result = await database.getUser({ login });\n      if (result.code === 200) {\n        const user = result.result;\n        const userPassword = user.password;\n        if (userPassword === password) {\n          const token = tokgen.generate();\n          if (redisClient.isConnected()) {\n            const expire = 60 * 60 * 24 * 30;\n            redisClient.set(token, user, expire);\n          }\n          return res.send({ result: token, code: result.code }).status(result.code);\n        } else {\n          return res.send({result: 'Forbidden.Wrong password', code: 403}).status(403);\n        }\n      } else {\n        return res.send(result).status(result.code);\n      }\n    } catch (error) {\n      console.error(error);\n      return res.send({ result: 'Internal error', code: 500 }).status(500);\n    }\n  });\n\n  api.post('/logout', async function(req, res) {\n    const token = req.query.token;\n    if (!token) {\n      return res.send({result: 'Missing required field', code: 500}).status(500);\n    }\n    if (redisClient.isConnected()) {\n      redisClient.removeBy(token);\n      return res.send({ result: 'OK', code: 200 }).status(200);\n    } else {\n      console.error('Redis not connect');\n      return res.send({ result: 'Internal error', code: 500 }).status(500);\n    }\n  });\n\n  api.get('/getUser', async function(req, res) {\n    const token = req.query.token;\n    if (!token) {\n      return res.send({result: 'Missing required field', code: 500}).status(500);\n    }\n    try {\n      const user = await redisClient.get(token);\n      if (user) {\n        const result = await database.getUser({ login: user.login });\n        if (result.code === 200) {\n          if (result.result.password) delete result.result.password;\n          return res.send({result: result.result, code: result.code}).status(result.code);\n        } else {\n          return res.send(result).status(result.code);\n        }\n      } else {\n        return res.send({ result: 'User not authorized', code: 401 });\n      }\n    } catch (error) {\n      console.error(error);\n      res.send({ result: 'Internal error', code: 500 }).status(500);\n    }\n  });\n\n  return api;\n};"]}